What happens when you initialize a repository? Why do you need to do it?
	
	1- When you initialize a repository a hidden directory called '.git' is created that shall hold all the meta-data concerning that repository: commits history, branches, .. etc.
	2- The files that already was contained in the directory in which the '.git' directory was created would be considered as files in the new made repository.
	3- These new files are marked as "untracked" meaning that no history concerning these files is found.
	4- If you run 'git log' an error:' fatal: bad default revision 'HEAD' ' is shown indicating that no commits can be found, this happens since creating a new repository in a local directory doesn't mean that commits has been made, in such case you would have to create a commit yourself which will relatively change the status of the files in the repository from being "untracked".

	Why do you need to do it? 
	To be able to track the files in that repository and create a history log for the changes that shall be done to it. In other words, you do it when you want to use version control (through git) with some files you have.

How is the staging area different from the working directory and the repository? What value do you think it offers?
	
	Staging area is an intermediate area into which you add files that you wish to commit into your repository. It's different from both working directory and repository in that in a working directory 'untracked files' (not added to the repository yet) along with 'tracked files' (committed and added to the repository) can co-exit, while in the repository only committed files are found. In the staging area files that are waiting to be committed, so it can move to the repository, exit.
	Staging area offers a great value in which it gives you the ability to group more that one file, in your opinion that relate to the same logical change (for example an added feature that required a change to be made in two files), into a single commit.

How can you use the staging area to make sure you have one commit per logical change?
	
	Using 'git diff' command with no arguments give you the ability to compare the files in your working directory with files in the staging area thus, checking what changes have been made.
	By doing this you may find out that all changes made are related to a certain one logical change, hence you can now commit making sure that this is a one commit per logical change, or if the changes are scarce and not related, then you may refrain from committing or remove the more than needed files in the staging area and commit what is just relevant (No idea how to do this yet!)

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Branches can be used when you want to change something in your program while having a working version kept intact, for example adding a new experimental feature, providing a new language support, etc.
	You can create a new branch where you implement the changes you wish to try, while having the 'master' branch containing the latest version of your working program.

How do the diagrams help you visualize the branch structure?

	It shows you the sequence of made commits in each branch, when a new branch was created, and what are the commits that got made in that new branch, all in a visual way easy for you to comprehend.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	Merging two branches together results in adding the commits of the two branches together, these commits when you run 'git log' will be shown ordered in a chronological order.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	Pros:- 
		-Relives you for the hassle of looking into each file you're gonna merge and find out the common sections that's gonna be merged.
		-In case of conflicts in merging git doesn't take any reckless actions, rather it returns to the user for advice by specifying where the conflict is and requires a manual conflict resolution from the user.

	Cons:-
		-Can't deal with merge conflicts which in case of manual merging won't exist in the first place, for example when there are two versions of the same function (a code that occupies the same space in the two files to be merged) git can't specify which one to use, this would need a checker to run the two versions of code to find out which one is better in terms of performance, execution time, ... etc., a thing that is not present in git.
